# text_handlers.py
from aiogram.types import Message
from handlers_common import process_user_input, show_parser_result
from parse_expense import parse_expense_t
from db_handler import save_expense

from db_handler import save_income

async def handle_new_expense_t(raw: str, message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username or ""

    category, subcategory, price = parse_expense_t(raw)

    if not (category and subcategory and price):
        return await message.answer("‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–µ—Ä–∞
    await show_parser_result(category, subcategory, price, message)

    try:
        await save_expense(user_id, chat_id, username, category, subcategory, float(price))
        await message.answer("‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")


# ----------- –î–û–•–û–î–´ -----------
async def handle_new_income_t(raw: str, message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–æ—Ö–æ–¥–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username or ""

    try:
        source, amount_str = raw.rsplit(maxsplit=1)
        amount = float(amount_str)
    except Exception:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –¥–æ—Ö–æ–¥ –ª–∏—á–Ω–æ–µ 12500")

    await message.answer(f"üí∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}, –°—É–º–º–∞: {int(amount):,}".replace(",", "."))

    try:
        await save_income(user_id, source, amount)
        await message.answer("‚úÖ –î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Ö–æ–¥: {e}")


async def handle_text_message(message: Message):
    text = message.text.strip()
    command, *rest = text.split(maxsplit=1)

    if command.lower() == "–¥–æ—Ö–æ–¥" and rest:
        raw_income = rest[0]
        await handle_new_income_t(raw_income, message)
    else:
        await process_user_input(
            raw_text=text,
            message=message,
            handle_new_expense_func=handle_new_expense_t
        )