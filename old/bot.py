# bot.py

import asyncio
import logging
import os

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import CommandStart
from dotenv import load_dotenv

from parse_expense import parse_expense
from db_handler import save_expense, update_last_field, get_today_purchases
from transcribe_with_denoise import transcribe_with_denoise

load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')

logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


@dp.message(CommandStart())
async def on_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.\n\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞—Ç—É: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–µ–Ω–∞¬ª.\n"
        "‚Ä¢ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏:\n"
        "  ‚Äì ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ù–æ–≤–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ¬ª\n"
        "  ‚Äì ¬´–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ù–æ–≤–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ¬ª\n"
        "  ‚Äì ¬´–¶–µ–Ω–∞ –ù–æ–≤–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ¬ª\n"
        "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ç—Ä–∞—Ç: –Ω–∞–ø–∏—à–∏ ¬´—Å–ø–∏—Å–æ–∫¬ª."
    )


async def handle_new_expense(raw: str, message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username or ""

    await message.answer("üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –ø–∞—Ä—Å–µ—Ä‚Ä¶")
    category, subcategory, price = parse_expense(raw)

    if not (category and subcategory and price):
        return await message.answer("‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç.")

    await message.answer(
        f"ü§ñ –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª:\n"
        f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n"
        f"‚Ä¢ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{subcategory}</b>\n"
        f"‚Ä¢ –¶–µ–Ω–∞: <b>{price}</b>",
        parse_mode="HTML"
    )

    try:
        await save_expense(user_id, chat_id, username, category, subcategory, float(price))
        await message.answer("‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")


async def handle_correction(field: str, new_val: str, message: Message):
    user_id = message.from_user.id
    await message.answer(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª—è—é –ø–æ–ª–µ <b>{field}</b> –Ω–∞ ¬´{new_val}¬ª‚Ä¶", parse_mode="HTML")
    try:
        ok = await update_last_field(user_id, field, new_val)
        if ok:
            await message.answer("‚úÖ –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    except ValueError as ve:
        await message.answer(f"‚ùå {ve}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: {e}")


@dp.message(lambda m: m.text and not m.voice)
async def text_handler(message: Message):
    text = message.text.strip()
    lower = text.lower()

    # –°–ø–∏—Å–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    if lower == "—Å–ø–∏—Å–æ–∫":
        rows = await get_today_purchases(message.from_user.id)
        if not rows:
            return await message.answer("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        lines = [
            f"{r['ts'].strftime('%H:%M:%S')} ‚Äî {r['category']} / {r['subcategory']} = {r['price']}"
            for r in rows
        ]
        return await message.answer("\n".join(lines))

    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ–ª–µ–π
    if lower.startswith("–∫–∞—Ç–µ–≥–æ—Ä–∏—è"):
        parts = text.split(maxsplit=1)
        if len(parts) < 2 or not parts[1].strip():
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏—è¬ª")
        return await handle_correction("category", parts[1].strip(), message)

    if lower.startswith("–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"):
        parts = text.split(maxsplit=1)
        if len(parts) < 2 or not parts[1].strip():
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ ¬´–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è¬ª")
        return await handle_correction("subcategory", parts[1].strip(), message)

    if lower.startswith("—Ü–µ–Ω–∞"):
        parts = text.split(maxsplit=1)
        if len(parts) < 2 or not parts[1].strip():
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ ¬´–¶–µ–Ω–∞¬ª")
        return await handle_correction("price", parts[1].strip(), message)

    # –ò–Ω–∞—á–µ ‚Äî –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
    await handle_new_expense(text, message)


@dp.message(lambda m: m.voice)
async def voice_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    await message.answer("üéôÔ∏è –ù–∞—á–∞–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ‚Ä¶")
    file = await bot.get_file(message.voice.file_id)
    local_path = f"voice_{message.voice.file_id}.ogg"
    await bot.download_file(file.file_path, destination=local_path)

    try:
        raw = transcribe_with_denoise(input_file=local_path, whisper_model="base", language="ru")
        await message.answer(f"üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–∞–∫: {raw}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        os.remove(local_path)
        return
    finally:
        if os.path.exists(local_path):
            os.remove(local_path)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ text_handler
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º raw-—Å—Ç—Ä–æ–∫—É
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º "—Å–ø–∏—Å–æ–∫" –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
    lower = raw.lower().strip()
    if lower == "—Å–ø–∏—Å–æ–∫":
        # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        rows = await get_today_purchases(user_id)
        if not rows:
            return await message.answer("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        lines = [
            f"{r['ts'].strftime('%H:%M:%S')} ‚Äî {r['category']} / {r['subcategory']} = {r['price']}"
            for r in rows
        ]
        return await message.answer("\n".join(lines))

    if lower.startswith("–∫–∞—Ç–µ–≥–æ—Ä–∏—è"):
        parts = raw.split(maxsplit=1)
        return await handle_correction("category", parts[1].strip() if len(parts)>1 else "", message)

    if lower.startswith("–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"):
        parts = raw.split(maxsplit=1)
        return await handle_correction("subcategory", parts[1].strip() if len(parts)>1 else "", message)

    if lower.startswith("—Ü–µ–Ω–∞"):
        parts = raw.split(maxsplit=1)
        return await handle_correction("price", parts[1].strip() if len(parts)>1 else "", message)

    # –ò–Ω–∞—á–µ ‚Äî –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
    await handle_new_expense(raw, message)


async def main():
    logging.info("–ó–∞–ø—É—Å–∫ polling‚Ä¶")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
