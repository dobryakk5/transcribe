import ffmpeg
import transcribe_with_denoise
import os


def denoise_with_afftdn(input_file: str, output_file: str, noise_reduction: int = 15) -> None:
    """
    –®—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FFmpeg –∏ —Ñ–∏–ª—å—Ç—Ä–∞ afftdn.
    """
    try:
        (
            ffmpeg
            .input(input_file)
            .output(output_file, af=f'afftdn=nr={noise_reduction}')
            .overwrite_output()
            .run()
        )
        print(f"[afftdn] {input_file} ‚Üí {output_file}")
    except ffmpeg.Error as e:
        print("‚ùå –û—à–∏–±–∫–∞ FFmpeg –ø—Ä–∏ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–∏:")
        print(e.stderr.decode())
        raise


def transcribe_audio(audio_path: str, language: str = 'ru', model_size: str = 'small') -> str:
    """
    –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä–µ—á—å –∏–∑ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é Whisper.
    """
    model = transcribe_with_denoise.load_model(model_size)
    result = model.transcribe(audio_path, language=language)
    return result['text']


if __name__ == '__main__':
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    raw_audio = 'audio.ogg'          # –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    denoised_audio = 'denoised.wav'  # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ afftdn

    # 1) –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞
    denoise_with_afftdn(raw_audio, denoised_audio)

    # 2) –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
    text = transcribe_audio(denoised_audio)
    print("üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
    print(text)
