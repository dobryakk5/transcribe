import os
import math
import requests
from io import BytesIO
from aiogram.types import Message
from pyzbar.pyzbar import decode
from PIL import Image

from parse_expense import parse_expense_ph  # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
from db_handler import save_expenses_ph   # —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤ –ë–î

FNS_TOKEN = os.getenv('FNS_TOKEN')


async def handle_photo_message(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ: –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç QR, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á–µ–∫ –Ω–∞ proverkacheka,
    —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤—ã–≤–æ–¥–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ë–î.
    """
    await message.answer("üì∑ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞—é QR-–∫–æ–¥‚Ä¶")

    # –°–∫–∞—á–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –ø–∞–º—è—Ç—å
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    buffer = BytesIO()
    await message.bot.download_file(file.file_path, buffer)
    buffer.seek(0)

    # –û—Ç–∫—Ä—ã—Ç—å –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å QR
    try:
        img = Image.open(buffer)
    except Exception as e:
        return await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

    decoded = decode(img)
    if not decoded:
        return await message.answer("‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ.")

    qr_raw = decoded[0].data.decode('utf-8')
    await message.answer(f"üîç RAW QR: <code>{qr_raw}</code>", parse_mode="HTML")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ –Ω–∞ proverkacheka
    url = 'https://proverkacheka.com/api/v1/check/get'
    payload = {'token': FNS_TOKEN, 'qrraw': qr_raw}
    try:
        resp = requests.post(url, data=payload, timeout=10)
        resp.raise_for_status()
    except Exception as e:
        return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ–∫–∞: {e}")

    result = resp.json()
    if result.get('code') != 1:
        return await message.answer(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result}")

    raw_items = result['data']['json'].get('items', [])
    if not raw_items:
        return await message.answer("‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤.")

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—É–º–º–∞_–≤_–∫–æ–ø–µ–π–∫–∞—Ö)
    items_with_price = [
        (it.get('name', '').strip(), it.get('sum', 0))
        for it in raw_items
    ]

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categorized = parse_expense_ph(items_with_price)

    # 1) –í—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç
    lines = ["üìã –ü–æ–∑–∏—Ü–∏–∏ —á–µ–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:"]
    for cat, name, sum_kopek in categorized:
        rub = math.ceil(sum_kopek / 100)
        cat_disp = cat or "(–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)"
        lines.append(f"‚Ä¢ {cat_disp} ‚Äî {name} ‚Äî {rub} ‚ÇΩ")
    await message.answer("\n".join(lines))

    # 2) –ì–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: (category, name, price_float)
    items_to_save = []
    for cat, name, sum_kopek in categorized:
        if not (cat and name and isinstance(sum_kopek, (int, float))):
            continue
        price_rub = math.ceil(sum_kopek / 100)
        items_to_save.append((cat, name, float(price_rub)))

    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if items_to_save:
        try:
            await save_expenses_ph(
                user_id=message.from_user.id,
                chat_id=message.chat.id,
                username=message.from_user.username or "",
                items=items_to_save
            )
            await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {len(items_to_save)} –ø–æ–∑–∏—Ü–∏–π.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
