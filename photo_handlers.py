import os
import math
import requests
from io import BytesIO
from aiogram.types import Message
from pyzbar.pyzbar import decode
from PIL import Image
from parse_expense_ph import parse_expense_ph  # –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π

# FNS_TOKEN –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–∑ main.py —á–µ—Ä–µ–∑ load_dotenv)
FNS_TOKEN = os.getenv('FNS_TOKEN')

async def handle_photo_message(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –∏–∑ —Ñ–æ—Ç–æ, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á–µ–∫ –Ω–∞ proverkacheka.com,
    —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ —Ç√ü–æ–≤–∞—Ä–æ–≤.
    """
    await message.answer("üì∑ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞—é QR-–∫–æ–¥‚Ä¶")

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ Bot API
    photo = message.photo[-1]
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file = await message.bot.get_file(photo.file_id)
    buffer = BytesIO()
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ BytesIO
    await message.bot.download_file(file.file_path, buffer)
    buffer.seek(0)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ BytesIO
    try:
        img = Image.open(buffer)
    except Exception as e:
        return await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π QR-–∫–æ–¥
    decoded = decode(img)
    if not decoded:
        return await message.answer("‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ.")

    qr_raw = decoded[0].data.decode('utf-8')
    await message.answer(f"üîç RAW QR: <code>{qr_raw}</code>", parse_mode="HTML")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫
    url = 'https://proverkacheka.com/api/v1/check/get'
    payload = {'token': FNS_TOKEN, 'qrraw': qr_raw}
    try:
        resp = requests.post(url, data=payload, timeout=10)
        resp.raise_for_status()
    except Exception as e:
        return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ–∫–∞: {e}")

    result = resp.json()
    if result.get('code') != 1:
        return await message.answer(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result}")

    items = result['data']['json'].get('items', [])
    if not items:
        return await message.answer("‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤.")

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ (name, price) –∏–∑ –æ—Ç–≤–µ—Ç–∞
    raw_items = [(it.get('name', '').strip(), it.get('sum', 0)) for it in items]

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    categorized = parse_expense_ph(raw_items)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥: –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî —Ç–æ–≤–∞—Ä ‚Äî —Ä—É–±–ª–∏ (–æ–∫—Ä—É–≥–ª. –≤–≤–µ—Ä—Ö)
    lines = ["üìã –ü–æ–∑–∏—Ü–∏–∏ —á–µ–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:"]
    for cat, name, sum_kopek in categorized:
        rub = math.ceil(sum_kopek / 100)
        cat_display = cat or "(–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)"
        lines.append(f"‚Ä¢ {cat_display} ‚Äî {name} ‚Äî {rub} ‚ÇΩ")

    await message.answer("\n".join(lines))
