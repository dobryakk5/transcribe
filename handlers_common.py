# handlers_common.py
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types.input_file import BufferedInputFile
from db_handler import update_last_field, get_today_purchases, get_user_purchases
from start_handlers import on_start
import pandas as pd
import textwrap
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime

async def show_parser_result(category: str, subcategory: str, price: str, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞"""
    await message.answer(
        f"ü§ñ –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª:\n"
        f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n"
        f"‚Ä¢ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{subcategory}</b>\n"
        f"‚Ä¢ –¶–µ–Ω–∞: <b>{price}</b>",
        parse_mode="HTML"
    )

async def handle_correction(field: str, new_val: str, message: Message):
    user_id = message.from_user.id
    field_names = {
        'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        'subcategory': '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è',
        'price': '–¶–µ–Ω–∞'
    }
    field_rus = field_names.get(field, field)
    await message.answer(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª—è—é –ø–æ–ª–µ <b>{field_rus}</b> –Ω–∞ ¬´{new_val}¬ª‚Ä¶", parse_mode="HTML")
    try:
        ok = await update_last_field(user_id, field, new_val)
        if ok:
            await message.answer("‚úÖ –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    except ValueError as ve:
        await message.answer(f"‚ùå {ve}")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: {e}")

async def show_today_purchases(user_id: int, message: Message):
    rows = await get_today_purchases(user_id)
    if not rows:
        return await message.answer("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ —Ü–µ–Ω–æ–π (–¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤), —Ü–µ–Ω–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    lines = [
        f"{r['subcategory'][:25]:<25} {int(r['price']):>10,}".replace(",", ".")
        for r in rows
    ]

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    total = sum(int(r['price']) for r in rows)
    lines.append("")
    lines.append(f"{'–ò—Ç–æ–≥–æ —Å—É–º–º–∞ —Å–µ–≥–æ–¥–Ω—è:':<25} {total:>10,}".replace(",", "."))

    await message.answer(f"<pre>{chr(10).join(lines)}</pre>", parse_mode="HTML")


# Pie chart display function
async def show_pie_chart(user_id: int, message: Message):
    rows = await get_user_purchases(user_id)
    if not rows:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    category_totals = {}
    for row in rows:
        category = row["category"]
        price = float(row["price"])
        category_totals[category] = category_totals.get(category, 0) + price

    labels = list(category_totals.keys())
    sizes = list(category_totals.values())

    fig, ax = plt.subplots()
    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
    ax.axis("equal")

    buffer = BytesIO()
    plt.savefig(buffer, format="png")
    buffer.seek(0)
    plt.close(fig)

    await message.answer_photo(photo=BufferedInputFile(buffer.read(), filename="chart.png"))


# Bar chart by day function
async def show_bar_chart_by_day(user_id: int, message: Message):
    rows = await get_user_purchases(user_id)
    if not rows:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    df = pd.DataFrame([dict(r) for r in rows])
    df["ts"] = pd.to_datetime(df["ts"])
    df["date"] = df["ts"].dt.date
    df["price"] = pd.to_numeric(df["price"], errors="coerce")

    grouped = df.groupby(["date", "category"])["price"].sum().unstack(fill_value=0)
    cumulative = grouped.cumsum()

    ax = cumulative.plot(kind="bar", stacked=True, figsize=(10, 6))
    ax.set_ylabel("–°—É–º–º–∞")
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_xticklabels([d.strftime("%d.%m") for d in cumulative.index], rotation=0)
    ax.set_title("–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    ax.legend(title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", bbox_to_anchor=(1.05, 1), loc="upper left")

    fig = ax.get_figure()
    fig.tight_layout()
    buffer = BytesIO()
    fig.savefig(buffer, format="png")
    buffer.seek(0)
    plt.close(fig)

    await message.answer_photo(photo=BufferedInputFile(buffer.read(), filename="bar_chart.png"))

async def show_daily_bar_chart(user_id: int, message: Message):
    rows = await get_user_purchases(user_id)
    if not rows:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    df = pd.DataFrame([dict(r) for r in rows])
    df["ts"] = pd.to_datetime(df["ts"])
    df["date"] = df["ts"].dt.date
    df["price"] = pd.to_numeric(df["price"], errors="coerce")

    grouped = df.groupby(["date", "category"])["price"].sum().unstack(fill_value=0)

    ax = grouped.plot(kind="bar", stacked=True, figsize=(10, 6))
    ax.set_ylabel("–°—É–º–º–∞")
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_xticklabels([d.strftime("%d.%m") for d in grouped.index], rotation=0)
    ax.set_title("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    ax.legend(title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", bbox_to_anchor=(1.05, 1), loc="upper left")

    fig = ax.get_figure()
    fig.tight_layout()
    buffer = BytesIO()
    fig.savefig(buffer, format="png")
    buffer.seek(0)
    plt.close(fig)

    await message.answer_photo(photo=BufferedInputFile(buffer.read(), filename="daily_bar_chart.png"))

async def export_purchases_to_excel(user_id: int, filename: str):
    rows = await get_user_purchases(user_id)

    data = []
    for row in rows:
        price_str = f"{int(row['price']):,}".replace(",", ".")
        data.append({
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': row['category'],
            '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è': row['subcategory'],
            '–¶–µ–Ω–∞': price_str,
            '–î–∞—Ç–∞': row['ts'].astimezone(tz=None).replace(tzinfo=None).strftime("%d.%m.%Y %H:%M")
        })

    df = pd.DataFrame(data)
    df.to_excel(filename, index=False)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Excel
    from openpyxl import load_workbook
    from openpyxl.styles import Alignment

    wb = load_workbook(filename)
    ws = wb.active

    for col in ws.columns:
        max_len = max((len(str(c.value)) for c in col if c.value), default=0)
        ws.column_dimensions[col[0].column_letter].width = max_len + 2

    header = [cell.value for cell in ws[1]]
    price_col = header.index('–¶–µ–Ω–∞') + 1
    time_col = header.index('–î–∞—Ç–∞') + 1

    for row in ws.iter_rows(min_row=2, min_col=price_col, max_col=price_col):
        row[0].alignment = Alignment(horizontal='right')

    for row in ws.iter_rows(min_row=2, min_col=time_col, max_col=time_col):
        row[0].alignment = Alignment(horizontal='right')

    wb.save(filename)



async def process_user_input(
    raw_text: str, 
    message: Message,
    handle_new_expense_func
):
    lower = raw_text.lower().strip()

    # –ö–Ω–æ–ø–∫–∞ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª
    if lower == "üìò –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        await message.answer(
        textwrap.dedent("""\
            üí∏ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –æ–ø–ª–∞—Ç—É: –Ω–∞–ø–∏—à–∏ ¬´–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–µ–Ω–∞¬ª.
            üßæ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å —á–µ–∫–∞: –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ —Å —á–µ–∫–∞
            üéôÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≥–æ–ª–æ—Å–æ–º: –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ.
            üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏:
              ‚Äì ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ù–æ–≤–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ¬ª
              ‚Äì ¬´–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ù–æ–≤–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ¬ª
              ‚Äì ¬´–¶–µ–Ω–∞ –ù–æ–≤–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ¬ª
            üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –æ–ø–ª–∞—Ç: –º–µ–Ω—é ¬´–°–ø–∏—Å–æ–∫¬ª 
            üî¢ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –æ–ø–ª–∞—Ç—ã –≤ Excel: –º–µ–Ω—é ¬´–¢–∞–±–ª–∏—Ü–∞¬ª 
            üí∞ –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã: –Ω–∞–ø–∏—à–∏ "–¥–æ—Ö–æ–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è 49505"
             - —Å–ª–æ–≤–æ "–¥–æ—Ö–æ–¥" –≤ –Ω–∞—á–∞–ª–µ –≥–æ–≤–æ—Ä–∏—Ç –±–æ—Ç—É –ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –¥–æ—Ö–æ–¥—ã.

            –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ üîÑ: –Ω–∞–ø–∏—à–∏ /start 
        """)
        )
        return

    if lower == "üìà –≥—Ä–∞—Ñ–∏–∫–∏":
        await message.answer(
            "üìä –ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üîò –ö—Ä—É–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")],
                    [KeyboardButton(text="üìä –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–¥–µ–Ω—å")],
                    [KeyboardButton(text="üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–¥–µ–Ω—å")],
                    [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
                ],
                resize_keyboard=True
            )
        )
        return

    if lower == "üí∞ –¥–æ—Ö–æ–¥—ã":
        from db_handler import get_user_incomes_days
        rows = await get_user_incomes_days(message.from_user.id, 30)
        if not rows:
            return await message.answer("–î–æ—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ—Ç.")
        lines = [
            f"{r['source'][:25]:<25} {int(r['amount']):>10,}".replace(",", ".")
            for r in rows
        ]
        total = sum(int(r['amount']) for r in rows)
        lines.append("")
        lines.append(f"{'–ò—Ç–æ–≥–æ –∑–∞ 30 –¥–Ω–µ–π:':<25} {total:>10,}".replace(",", "."))
        await message.answer(f"<pre>{chr(10).join(lines)}</pre>", parse_mode="HTML")
        return

    if lower == "üîò –∫—Ä—É–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        await show_pie_chart(message.from_user.id, message)
        return

    if lower == "üìä –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–¥–µ–Ω—å":
        await show_bar_chart_by_day(message.from_user.id, message)
        return

    if lower == "üìä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–¥–µ–Ω—å":
        await show_daily_bar_chart(message.from_user.id, message)
        return

    if lower == "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await on_start(message)
        return

    if lower == "üìÑ —Å–ø–∏—Å–æ–∫":
        await show_today_purchases(message.from_user.id, message)
        return

    if lower == "üî¢ —Ç–∞–±–ª–∏—Ü–∞":
        import os
        filename = "Fin_a_bot.xlsx"
        await export_purchases_to_excel(message.from_user.id, filename)
        with open(filename, 'rb') as f:
            file_data = f.read()
        await message.answer_document(BufferedInputFile(file_data, filename))
        os.remove(filename)
        return

    correction_commands = {
        "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "category",
        "–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "subcategory",
        "—Ü–µ–Ω–∞": "price"
    }

    for prefix, field in correction_commands.items():
        if lower.startswith(prefix):
            parts = raw_text.split(maxsplit=1)
            if len(parts) < 2 or not parts[1].strip():
                return await message.answer(f"‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ ¬´{prefix.capitalize()}¬ª")
            return await handle_correction(field, parts[1].strip(), message)

    await handle_new_expense_func(raw_text, message)
