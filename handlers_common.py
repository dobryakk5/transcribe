# handlers_common.py
from aiogram.types import Message
from db_handler import update_last_field, get_today_purchases, get_user_purchases
import pandas as pd


async def show_parser_result(category: str, subcategory: str, price: str, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞"""
    await message.answer(
        f"ü§ñ –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª:\n"
        f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n"
        f"‚Ä¢ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{subcategory}</b>\n"
        f"‚Ä¢ –¶–µ–Ω–∞: <b>{price}</b>",
        parse_mode="HTML"
    )


async def handle_correction(field: str, new_val: str, message: Message):
    user_id = message.from_user.id
    await message.answer(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª—è—é –ø–æ–ª–µ <b>{field}</b> –Ω–∞ ¬´{new_val}¬ª‚Ä¶", parse_mode="HTML")
    try:
        ok = await update_last_field(user_id, field, new_val)
        if ok:
            await message.answer("‚úÖ –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    except ValueError as ve:
        await message.answer(f"‚ùå {ve}")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: {e}")


async def show_today_purchases(user_id: int, message: Message):
    rows = await get_today_purchases(user_id)
    if not rows:
        return await message.answer("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
    
    lines = [
        f"{r['ts'].strftime('%H:%M:%S')} ‚Äî {r['category']} / {r['subcategory']} = {r['price']}"
        for r in rows
    ]
    await message.answer("\n".join(lines))


async def export_purchases_to_excel(user_id: int, filename: str):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    rows = await get_user_purchases(user_id)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    data = [{
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': row['category'],
        '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è': row['subcategory'],
        '–¶–µ–Ω–∞': row['price'],
        '–í—Ä–µ–º—è': row['ts']
    } for row in rows]
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    df.to_excel(filename, index=False)
    print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}")

async def process_user_input(
    raw_text: str, 
    message: Message,
    handle_new_expense_func
):
    lower = raw_text.lower().strip()

    if lower == "—Å–ø–∏—Å–æ–∫":
        await show_today_purchases(message.from_user.id, message)
        return

    if lower == "—Ç–∞–±–ª–∏—Ü–∞":
        filename = f"purchases_{message.from_user.id}.xlsx"
        await export_purchases_to_excel(message.from_user.id, filename)
        await message.answer_document(InputFile(filename))
        return

    correction_commands = {
        "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "category",
        "–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "subcategory",
        "—Ü–µ–Ω–∞": "price"
    }

    for prefix, field in correction_commands.items():
        if lower.startswith(prefix):
            parts = raw_text.split(maxsplit=1)
            if len(parts) < 2 or not parts[1].strip():
                return await message.answer(f"‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ ¬´{prefix.capitalize()}¬ª")
            return await handle_correction(field, parts[1].strip(), message)

    await handle_new_expense_func(raw_text, message)